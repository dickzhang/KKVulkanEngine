#version 460
#extension GL_NV_ray_tracing : require

layout(binding = 0, set = 0) uniform accelerationStructureNV topLevelAS;
layout(binding = 1, set = 0, rgba8) uniform image2D image;

layout(binding = 2, set = 0) uniform CameraProperties 
{
	vec4 lens;
	vec4 pos;
	mat4 invProj;
	mat4 invView;
} cameraParam;

layout(location = 0) rayPayloadNV vec3 hitValue;

void main() 
{
	vec2 uv = vec2(gl_LaunchIDNV.xy) / vec2(gl_LaunchSizeNV.xy); // int to float
	vec2 clip = uv * 2.0 - 1.0;
	vec3 pos = cameraParam.pos.xyz;
	vec3 ray = vec3(uv.x * 2.0 - 1.0, -(uv.y * 2.0 - 1.0), 1.0); // flip Y
	// clip to view space
	ray = (cameraParam.invProj * vec4(ray, 1.0)).xyz;
	ray.x = ray.x * ray.z;
	ray.y = ray.y * ray.z;
	// view space to world space
	ray.xyz = (cameraParam.invView * vec4(ray, 0.0)).xyz;
	ray.xyz = normalize(ray.xyz);

	// void traceNV(accelerationStructureNV topLevel,
    //                uint rayFlags,
    //                uint cullMask,
    //                uint sbtRecordOffset,
    //                uint sbtRecordStride,
    //                uint missIndex,
    //                vec3 origin,
    //                float Tmin,
    //                vec3 direction,
    //                float Tmax,
    //                int payload);
	traceNV(topLevelAS, gl_RayFlagsOpaqueNV, 0xFF, 0, 0, 0, pos, cameraParam.lens.z, ray, cameraParam.lens.w, 0);

	imageStore(image, ivec2(gl_LaunchIDNV.xy), vec4(hitValue, 0.0));
}

//
// Copyright (c) Microsoft. All rights reserved.
// This code is licensed under the MIT License (MIT).
// THIS CODE IS PROVIDED *AS IS* WITHOUT WARRANTY OF
// ANY KIND, EITHER EXPRESS OR IMPLIED, INCLUDING ANY
// IMPLIED WARRANTIES OF FITNESS FOR A PARTICULAR
// PURPOSE, MERCHANTABILITY, OR NON-INFRINGEMENT.
//
// Developed by Minigraph
//
// Author:  James Stanard 
//

#version 450

layout (local_size_x = 8, local_size_y = 8) in;

layout (binding = 0)       uniform sampler2DArray depthImage;
layout (binding = 2, r8)   uniform image2D        outAoImage;

layout (binding = 4) uniform AoParam 
{
	vec4 invThicknessTable[3];
    vec4 sampleWeightTable[3];
    vec4 invSliceDimension;
} paramData;

#define TILE_DIM       16
#define THREAD_COUNT_X 8
#define THREAD_COUNT_Y 8

shared float g_DepthSamples[TILE_DIM * TILE_DIM];

float TestSamplePair(float frontDepth, float invRange, uint base, int offset)
{
    float rejectFadeoff = paramData.invSliceDimension.z;

    float disocclusion1 = g_DepthSamples[base + offset] * invRange - frontDepth;
    float disocclusion2 = g_DepthSamples[base - offset] * invRange - frontDepth;

    float pseudoDisocclusion1 = clamp(rejectFadeoff * disocclusion1, 0, 1);
    float pseudoDisocclusion2 = clamp(rejectFadeoff * disocclusion2, 0, 1);

    return clamp(disocclusion1, pseudoDisocclusion2, 1.0) + clamp(disocclusion2, pseudoDisocclusion1, 1.0) - pseudoDisocclusion1 * pseudoDisocclusion2;
}

float TestSamples(uint centerIdx, uint x, uint y, float invDepth, float invThickness)
{
    float invRange   = invThickness * invDepth;
    float frontDepth = invThickness - 0.5;

    if (y == 0)
    {
        return 0.5 * (
            TestSamplePair(frontDepth, invRange, centerIdx, int(x)) +
            TestSamplePair(frontDepth, invRange, centerIdx, int(x * TILE_DIM))
        );
    }
    else if (x == y)
    {
        return 0.5 * (
            TestSamplePair(frontDepth, invRange, centerIdx, int(x * TILE_DIM - x)) +
            TestSamplePair(frontDepth, invRange, centerIdx, int(x * TILE_DIM + x))
        );
    }
    else
    {
        return 0.25 * (
            TestSamplePair(frontDepth, invRange, centerIdx, int(y * TILE_DIM + x)) +
            TestSamplePair(frontDepth, invRange, centerIdx, int(y * TILE_DIM - x)) +
            TestSamplePair(frontDepth, invRange, centerIdx, int(x * TILE_DIM + y)) +
            TestSamplePair(frontDepth, invRange, centerIdx, int(x * TILE_DIM - y))
        );
    }
}

void main()
{
    vec4 invThicknessTable[3] = paramData.invThicknessTable;
    vec4 sampleWeightTable[3] = paramData.sampleWeightTable;
    vec2 invSliceDimension    = paramData.invSliceDimension.xy;
    float rejectFadeoff       = paramData.invSliceDimension.z;
    float rcpAccentuation     = paramData.invSliceDimension.w;

    vec2 quadCenterUV = ivec2(gl_GlobalInvocationID.xy + gl_LocalInvocationID.xy - 3) * invSliceDimension;

	vec4 depths = textureGather(depthImage, vec3(quadCenterUV, gl_GlobalInvocationID.z));
    int destIdx = int(gl_LocalInvocationID.x * 2 + gl_LocalInvocationID.y * 2 * TILE_DIM);

    g_DepthSamples[destIdx]                = depths.w;
    g_DepthSamples[destIdx + 1]            = depths.z;
    g_DepthSamples[destIdx + TILE_DIM]     = depths.x;
    g_DepthSamples[destIdx + TILE_DIM + 1] = depths.y;

    groupMemoryBarrier();
    barrier();

	uint thisIdx       = gl_LocalInvocationID.x + gl_LocalInvocationID.y * TILE_DIM + 4 * TILE_DIM + 4;
    float invThisDepth = 1.0 / g_DepthSamples[thisIdx];
    
    float ao = 0.0;

	ao += sampleWeightTable[0].y * TestSamples(thisIdx, 2, 0, invThisDepth, invThicknessTable[0].y);
	ao += sampleWeightTable[0].w * TestSamples(thisIdx, 4, 0, invThisDepth, invThicknessTable[0].w);
	ao += sampleWeightTable[1].x * TestSamples(thisIdx, 1, 1, invThisDepth, invThicknessTable[1].x);
	ao += sampleWeightTable[2].x * TestSamples(thisIdx, 2, 2, invThisDepth, invThicknessTable[2].x);
	ao += sampleWeightTable[2].w * TestSamples(thisIdx, 3, 3, invThisDepth, invThicknessTable[2].w);
	ao += sampleWeightTable[1].z * TestSamples(thisIdx, 1, 3, invThisDepth, invThicknessTable[1].z);
	ao += sampleWeightTable[2].z * TestSamples(thisIdx, 2, 4, invThisDepth, invThicknessTable[2].z);

	uvec2 outLoc = gl_GlobalInvocationID.xy << 2 | uvec2(gl_GlobalInvocationID.z & 3, gl_GlobalInvocationID.z >> 2);
    imageStore(outAoImage, ivec2(outLoc), vec4(ao * rcpAccentuation));
}
//
// Copyright (c) Microsoft. All rights reserved.
// This code is licensed under the MIT License (MIT).
// THIS CODE IS PROVIDED *AS IS* WITHOUT WARRANTY OF
// ANY KIND, EITHER EXPRESS OR IMPLIED, INCLUDING ANY
// IMPLIED WARRANTIES OF FITNESS FOR A PARTICULAR
// PURPOSE, MERCHANTABILITY, OR NON-INFRINGEMENT.
//
// Developed by Minigraph
//
// Author:  James Stanard 
//

#version 450

layout (local_size_x = 8, local_size_y = 8) in;

layout (binding = 0, r32f) uniform readonly image2D depthImage;

layout (binding = 1, r32f) uniform image2D linearImage;
layout (binding = 2, r32f) uniform image2D down2xImage;
layout (binding = 3, r32f) uniform image2DArray down2xAtlas;

layout (binding = 4) uniform ParamBlock 
{
    vec4 data;
} paramData;

shared float g_CacheDepth[256];

float Linearize(uvec2 uv)
{
    float depth = imageLoad(depthImage, ivec2(uv)).x;
    depth = 1.0 - depth;
    float dist = 1.0 / (paramData.data.x * depth + 1.0);

    imageStore(linearImage, ivec2(uv), vec4(dist));

    return dist;
}

void main()
{
    uvec2 startUV = gl_WorkGroupID.xy << 4 | gl_LocalInvocationID.xy;
    uint  destIdx = gl_LocalInvocationID.y << 4 | gl_LocalInvocationID.x;
    
    g_CacheDepth[destIdx +  0 ] = Linearize(startUV | uvec2(0, 0));
    g_CacheDepth[destIdx +  8 ] = Linearize(startUV | uvec2(8, 0));
    g_CacheDepth[destIdx + 128] = Linearize(startUV | uvec2(0, 8));
    g_CacheDepth[destIdx + 136] = Linearize(startUV | uvec2(8, 8));

    groupMemoryBarrier();
    barrier();

    uint ldsIndex = (gl_LocalInvocationID.x << 1) | (gl_LocalInvocationID.y << 5);
    float depth   = g_CacheDepth[ldsIndex];
    
    uvec2 uv = gl_GlobalInvocationID.xy;
    uint slice = (uv.x & 3) | ((uv.y & 3) << 2);
    
    imageStore(down2xImage, ivec2(uv), vec4(depth));
    imageStore(down2xAtlas, ivec3(uv >> 2, slice), vec4(depth));
}
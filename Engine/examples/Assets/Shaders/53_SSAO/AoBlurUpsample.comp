//
// Copyright (c) Microsoft. All rights reserved.
// This code is licensed under the MIT License (MIT).
// THIS CODE IS PROVIDED *AS IS* WITHOUT WARRANTY OF
// ANY KIND, EITHER EXPRESS OR IMPLIED, INCLUDING ANY
// IMPLIED WARRANTIES OF FITNESS FOR A PARTICULAR
// PURPOSE, MERCHANTABILITY, OR NON-INFRINGEMENT.
//
// Developed by Minigraph
//
// Author:  James Stanard 
//

#version 450

layout (local_size_x = 8, local_size_y = 8) in;

layout (binding = 0) uniform sampler2D   texLowDepth;
layout (binding = 1) uniform sampler2D   texHighDepth;
layout (binding = 2) uniform sampler2D   texintervalDepth;
layout (binding = 3, r8) uniform image2D texOutAO;

layout (binding = 4) uniform AoParam 
{
	vec4 data0;
    vec4 data1;
} paramData;

shared float g_DepthCache[256];
shared float g_AOCache1[256];
shared float g_AOCache2[256];

vec2  invLowResolution;
vec2  invHighResolution;
float noiseFilterStrength;
float stepSize;
float blurTolerance;
float upsampleTolerance;

void PrefetchData(uint index, vec2 uv)
{
    vec4 ao1 = textureGather(texintervalDepth, uv);
    g_AOCache1[index + 0]  = ao1.w;
    g_AOCache1[index + 1]  = ao1.z;
    g_AOCache1[index + 16] = ao1.x;
    g_AOCache1[index + 17] = ao1.y;

    vec4 lowDepth = 1.0 / textureGather(texLowDepth, uv);
    g_DepthCache[index + 0]  = lowDepth.w;
    g_DepthCache[index + 1]  = lowDepth.z;
    g_DepthCache[index + 16] = lowDepth.x;
    g_DepthCache[index + 17] = lowDepth.y;
}

float SmartBlur(float a, float b, float c, float d, float e, bool left, bool middle, bool right)
{
    b = (left || middle) ? b : c;
    a = left ? a : b;
    d = (right || middle) ? d : c;
    e = right ? e : d;
    return ((a + e) / 2.0 + b + c + d) / 4.0;
}

bool CompareDeltas(float d1, float d2, float l1, float l2)
{
    float temp = d1 * d2 + stepSize;
    return temp * temp > l1 * l2 * blurTolerance;
}

void BlurHorizontally(uint leftMostIndex)
{
    float a0 = g_AOCache1[leftMostIndex + 0];
    float a1 = g_AOCache1[leftMostIndex + 1];
    float a2 = g_AOCache1[leftMostIndex + 2];
    float a3 = g_AOCache1[leftMostIndex + 3];
    float a4 = g_AOCache1[leftMostIndex + 4];
    float a5 = g_AOCache1[leftMostIndex + 5];
    float a6 = g_AOCache1[leftMostIndex + 6];

    float d0 = g_DepthCache[leftMostIndex + 0];
    float d1 = g_DepthCache[leftMostIndex + 1];
    float d2 = g_DepthCache[leftMostIndex + 2];
    float d3 = g_DepthCache[leftMostIndex + 3];
    float d4 = g_DepthCache[leftMostIndex + 4];
    float d5 = g_DepthCache[leftMostIndex + 5];
    float d6 = g_DepthCache[leftMostIndex + 6];

    float d01 = d1 - d0;
    float d12 = d2 - d1;
    float d23 = d3 - d2;
    float d34 = d4 - d3;
    float d45 = d5 - d4;
    float d56 = d6 - d5;

    float l01 = d01 * d01 + stepSize;
    float l12 = d12 * d12 + stepSize;
    float l23 = d23 * d23 + stepSize;
    float l34 = d34 * d34 + stepSize;
    float l45 = d45 * d45 + stepSize;
    float l56 = d56 * d56 + stepSize;

    bool c02 = CompareDeltas(d01, d12, l01, l12);
    bool c13 = CompareDeltas(d12, d23, l12, l23);
    bool c24 = CompareDeltas(d23, d34, l23, l34);
    bool c35 = CompareDeltas(d34, d45, l34, l45);
    bool c46 = CompareDeltas(d45, d56, l45, l56);

    g_AOCache2[leftMostIndex + 0] = SmartBlur(a0, a1, a2, a3, a4, c02, c13, c24);
    g_AOCache2[leftMostIndex + 1] = SmartBlur(a1, a2, a3, a4, a5, c13, c24, c35);
    g_AOCache2[leftMostIndex + 2] = SmartBlur(a2, a3, a4, a5, a6, c24, c35, c46);
}

void BlurVertically(uint topMostIndex)
{
    float a0 = g_AOCache2[topMostIndex + 0];
    float a1 = g_AOCache2[topMostIndex + 16];
    float a2 = g_AOCache2[topMostIndex + 32];
    float a3 = g_AOCache2[topMostIndex + 48];
    float a4 = g_AOCache2[topMostIndex + 64];
    float a5 = g_AOCache2[topMostIndex + 80];

    float d0 = g_DepthCache[topMostIndex + 2];
    float d1 = g_DepthCache[topMostIndex + 18];
    float d2 = g_DepthCache[topMostIndex + 34];
    float d3 = g_DepthCache[topMostIndex + 50];
    float d4 = g_DepthCache[topMostIndex + 66];
    float d5 = g_DepthCache[topMostIndex + 82];

    float d01 = d1 - d0;
    float d12 = d2 - d1;
    float d23 = d3 - d2;
    float d34 = d4 - d3;
    float d45 = d5 - d4;

    float l01 = d01 * d01 + stepSize;
    float l12 = d12 * d12 + stepSize;
    float l23 = d23 * d23 + stepSize;
    float l34 = d34 * d34 + stepSize;
    float l45 = d45 * d45 + stepSize;

    bool c02 = CompareDeltas(d01, d12, l01, l12);
    bool c13 = CompareDeltas(d12, d23, l12, l23);
    bool c24 = CompareDeltas(d23, d34, l23, l34);
    bool c35 = CompareDeltas(d34, d45, l34, l45);

    float aoResult1 = SmartBlur(a0, a1, a2, a3, a4, c02, c13, c24);
    float aoResult2 = SmartBlur(a1, a2, a3, a4, a5, c13, c24, c35);

    g_AOCache1[topMostIndex + 0]  = aoResult1;
    g_AOCache1[topMostIndex + 16] = aoResult2;
}

float BilateralUpsample(float highDepth, float highAo, vec4 lowDepths, vec4 lowAO)
{
    vec4 weights      = vec4(9, 3, 1, 3) / (abs(highDepth - lowDepths) + upsampleTolerance);
    float TotalWeight = dot(weights, vec4(1)) + noiseFilterStrength;
    float WeightedSum = dot(lowAO, weights) + noiseFilterStrength;
    return highAo * WeightedSum / TotalWeight;
}

void main()
{
    invLowResolution    = paramData.data0.xy;
    invHighResolution   = paramData.data0.zw;
    noiseFilterStrength = paramData.data1.x;
    stepSize            = paramData.data1.y;
    blurTolerance       = paramData.data1.z;
    upsampleTolerance   = paramData.data1.w;

    PrefetchData(gl_LocalInvocationID.x << 1 | gl_LocalInvocationID.y << 5, ivec2(gl_GlobalInvocationID.xy + gl_LocalInvocationID.xy - 2) * invLowResolution);
    
    groupMemoryBarrier();
    barrier();

    if (gl_LocalInvocationIndex < 39) {
        BlurHorizontally((gl_LocalInvocationIndex / 3) * 16 + (gl_LocalInvocationIndex % 3) * 3);
    }
    
    groupMemoryBarrier();
    barrier();

    if (gl_LocalInvocationIndex < 45) {
        BlurVertically((gl_LocalInvocationIndex / 9) * 32 + gl_LocalInvocationIndex % 9);
    }
    
    groupMemoryBarrier();
    barrier();
    
    uint idx0     = gl_LocalInvocationID.x + gl_LocalInvocationID.y * 16;
    vec4 lowSSAOs = vec4(g_AOCache1[idx0 + 16], g_AOCache1[idx0 + 17], g_AOCache1[idx0 + 1], g_AOCache1[idx0]);
    
    vec2 uv0 = gl_GlobalInvocationID.xy * 1 * invLowResolution;
    vec2 uv1 = gl_GlobalInvocationID.xy * 2 * invHighResolution;

	vec4 highSSAO   = vec4(1.0);
    vec4 lowDepths  = textureGather(texLowDepth, uv0);
    vec4 highDepths = textureGather(texHighDepth, uv1);
    
    ivec2 outUV = ivec2(gl_GlobalInvocationID.xy << 1);
    imageStore(texOutAO, outUV + ivec2(-1,  0), vec4(BilateralUpsample(highDepths.x, highSSAO.x, lowDepths.xyzw, lowSSAOs.xyzw)));
    imageStore(texOutAO, outUV + ivec2( 0,  0), vec4(BilateralUpsample(highDepths.y, highSSAO.y, lowDepths.yzwx, lowSSAOs.yzwx)));
    imageStore(texOutAO, outUV + ivec2( 0, -1), vec4(BilateralUpsample(highDepths.z, highSSAO.z, lowDepths.zwxy, lowSSAOs.zwxy)));
    imageStore(texOutAO, outUV + ivec2(-1, -1), vec4(BilateralUpsample(highDepths.w, highSSAO.w, lowDepths.wxyz, lowSSAOs.wxyz)));
}